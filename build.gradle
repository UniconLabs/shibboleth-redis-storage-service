plugins {
    id 'java'
    id 'idea'
    id 'com.avast.gradle.docker-compose' version '0.8.0'
    id 'net.researchgate.release' version '2.7.0'
    id 'groovy'
    id 'distribution'
    id 'signing'
}

repositories {
    maven { url 'https://build.shibboleth.net/nexus/content/groups/public' }
    mavenCentral()
}

project.ext.config = new ConfigSlurper().parse(new URL("https://raw.githubusercontent.com/UniconLabs/shibboleth-plugin-parent/develop/config.groovy"))

dependencies {
    compileOnly "net.shibboleth.idp:idp-admin-api:$config.common.shibboleth.version"
    compileOnly "net.shibboleth.idp:idp-admin-impl:$config.common.shibboleth.version"
    compileOnly "org.opensaml:opensaml-storage-api:$config.common.opensaml.version"
    compileOnly "ch.qos.logback:logback-core:${project.'logback.version'}"

    implementation "commons-configuration:commons-configuration:${project.'commons-configuration.version'}", {
        exclude module: 'commons-lang'
    }
    implementation "org.redisson:redisson:${project.'redisson.version'}", {
        exclude module: 'jackson-annotations'
        exclude module: 'jackson-core'
        exclude module: 'jackson-databind'
        exclude module: 'javassist'
        exclude module: 'slf4j-api'
        exclude module: 'byte-buddy'
        exclude module: 'netty-buffer'
        exclude module: 'netty-codec'
        exclude module: 'netty-codec-dns'
        exclude module: 'netty-common'
        exclude module: 'netty-handler'
        exclude module: 'netty-resolver'
        exclude module: 'netty-resolver-dns'
        exclude module: 'netty-transport'
    }
    implementation "io.netty:netty-buffer:$config.common.netty.version"
    implementation "io.netty:netty-codec:$config.common.netty.version"
    implementation "io.netty:netty-codec-dns:$config.common.netty.version"
    implementation "io.netty:netty-common:$config.common.netty.version"
    implementation "io.netty:netty-handler:$config.common.netty.version"
    implementation "io.netty:netty-resolver:$config.common.netty.version"
    implementation "io.netty:netty-resolver-dns:$config.common.netty.version"
    implementation "io.netty:netty-transport:$config.common.netty.version"

    testImplementation "junit:junit:${project.'junit.version'}"
    testImplementation "org.testng:testng:${project.'testng.version'}"
    testImplementation "com.fasterxml.jackson.core:jackson-core:$config.common.jackson.version"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:$config.common.jackson.version"
    testImplementation "net.shibboleth.idp:idp-authn-api:$config.common.shibboleth.version"
    testImplementation "org.opensaml:opensaml-storage-api:$config.common.opensaml.version:tests@jar"
}

apply from: 'gradle/shibboleth.gradle'
apply from: 'https://raw.githubusercontent.com/UniconLabs/shibboleth-plugin-parent/develop/build.gradle'

/*
 * Docker Compose (gradle-docker-compose-plugin) settings.
 * Used to start and stop docker containers before running tests.
 */
apply plugin: 'docker-compose'
dockerCompose {
    useComposeFiles = ['./src/test/docker/docker-compose.yml']
    captureContainersOutput = true
    waitForTcpPorts = false
}

test {
    useTestNG()
    scanForTestClasses = false
    include 'net/unicon/iam/shibboleth/storage/redis/**/*'
    dependsOn 'jar', 'composeUp'
    finalizedBy 'composeDown'
}